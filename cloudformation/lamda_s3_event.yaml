AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  VerificationToken:
    Description: Verification token from Slack app settings
    Type: String
    NoEcho: true
    
  AccessToken:
    Description: OAuth access token from Slack app settings
    Type: String
    NoEcho: true

  ApplicationName:
    Description: Name of the application deploying for the Twitter Feed Processor
    Type: String
    Default: Science-Montgomery-2019

Resources:

#  Comments: >
#    Here are API definations !

  # API Gateway to receive tweets
  TweetsProcessorAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "2017-06-11T02:20:25Z"
          title: !Ref AWS::StackName
        basePath: "/Prod"
        schemes:
        - "https"
        paths:
          /:
            post:
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub |-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TweetsProcessor.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"

#  Comments: >
#    Here are S3 definations !

  TweetsBucket:
    Type: AWS::S3::Bucket

#  PermissionForS3ToInvokeTweetsProcessorLambda:
#      Type: 'AWS::Lambda::Permission'
#      Properties:
#        Action: 'lambda:InvokeFunction'
#        FunctionName: !GetAtt TweetsProcessor.Arn
#        Principal: 's3.amazonaws.com'
#        SourceArn: !GetAtt TweetsBucket.Arn


#  Comments: >
#    Here are Kinesis Firehose stream definiations !

  # Kinesis Firehose stream for raw tweets

  IngestionFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join ['', ['arn:aws:s3:::', !Ref TweetsBucket]]
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
        Prefix: 'raw/'
        CompressionFormat: 'UNCOMPRESSED'
        RoleARN: !GetAtt IngestionFirehoseRole.Arn

  # Kinesis Firehose stream for processed entities
  EntitiesFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join ['', ['arn:aws:s3:::', !Ref TweetsBucket]]
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
        Prefix: 'entities/'
        CompressionFormat: 'UNCOMPRESSED'
        RoleARN: !GetAtt IngestionFirehoseRole.Arn

#  # Kinesis Firehose stream for processed sentiments
  SentimentFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join ['', ['arn:aws:s3:::', !Ref TweetsBucket]]
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
        Prefix: 'sentiment/'
        CompressionFormat: 'UNCOMPRESSED'
        RoleARN: !GetAtt IngestionFirehoseRole.Arn

  # IAM Role for Firehose
  IngestionFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref 'AWS::AccountId'

  # IAM policy for Firehose
  IngestionFirehosePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: TweetIngestionFirehosePolicy
      Roles:
        - !Ref IngestionFirehoseRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref TweetsBucket]]
              - !Join ['', ['arn:aws:s3:::', !Ref TweetsBucket, '/*']]
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource:
              - arn:aws:logs:*:*:*

#  Comments: >
#    Here are lambda function definiations !

  # IAM Role for process tweets lambda function
  TweetsProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: TweetsProcessorLambdaFuntionExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: CloudWatchAccess
            Effect: Allow
            Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents']
            Resource: arn:aws:logs:*:*:*
          - Sid: S3Access
            Effect: Allow
            Action: ['s3:GetObject', 's3:PutObject']
            Resource: [!GetAtt [TweetsBucket, Arn],
                      !Join ['', [!GetAtt [TweetsBucket, Arn], /*]]]
          - Sid: FirehoseAccess
            Effect: Allow
            Action: ['firehose:ListDeliveryStreams', 'firehose:PutRecord', 'firehose:PutRecordBatch']
            Resource: [!GetAtt [SentimentFirehoseStream, Arn],
                       !GetAtt [EntitiesFirehoseStream, Arn]]
          - Sid: ComprehendAccess
            Effect: Allow
            Action: ['comprehend:DetectEntities', 'comprehend:DetectSentiment']
            Resource: '*'
          - Sid: TranslateAccess
            Effect: Allow
            Action: ['translate:TranslateText']
            Resource: '*'

  #Lambda function to process tweets
#  TweetsProcessor:
#    Type: AWS::Serverless::Function
#    Properties:
#      Description: Process Raw Tweets for sentiment analysis
#      Handler: process_tweets.lambda_handler
#      Runtime: python3.6
#      CodeUri: ../lambda_functions/
#      Role:
#        Fn::GetAtt:
#        - TweetsProcessorRole
#        - Arn
#      Environment:
#        Variables:
#          VERIFICATION_TOKEN: !Ref VerificationToken
#          ACCESS_TOKEN: !Ref AccessToken
#          MIN_CONFIDENCE: 80
#          SENTIMENT_STREAM: !Ref SentimentFirehoseStream
#          ENTITY_STREAM: !Ref EntitiesFirehoseStream
#      Events:
#        TweetsProcessorAPIPost:
#          Type: Api
#          Properties:
#            Path: /
#            Method: post
#            RestApiId: !Ref TweetsProcessorAPI
#     Policies:
#       - RekognitionLabelsPolicy: {}


  TweetsProcessor:
    Type: AWS::Serverless::Function
    Properties:
      Description: Process Raw Tweets for sentiment analysis
      Handler: process_tweets.lambda_handler
      Runtime: python3.6
      CodeUri: ../lambda_functions/

      Role:
        Fn::GetAtt:
        - TweetsProcessorRole
        - Arn
      Environment:
        Variables:
          VERIFICATION_TOKEN: !Ref VerificationToken
          ACCESS_TOKEN: !Ref AccessToken
          MIN_CONFIDENCE: 80
      Events:
        ImageModeratorAPIPost:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref TweetsProcessorAPI
      Policies:
      - RekognitionLabelsPolicy: {}



#Comments: >
#  Below are useful outputs from the stack executions !

Outputs:
  RequestURL:
    Description: Prod URL for API to use as Request URL for Tweeter app
    Value: !Sub |-
       https://${TweetsProcessorAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/

  LambdaFunctionConsoleURL:
    Description: URL to the Lambda Function console
    Value: !Join ['', ['https://console.aws.amazon.com/lambda/home?region=', !Ref "AWS::Region", '#/functions/', !Ref "TweetsProcessor", '?tab=graph']]

#  S3ConsoleURL:
#    Description: URL to the Lambda Function console
#    Value: !Join ['', ['https://s3.console.aws.amazon.com/s3/buckets/', !Ref 'TweetsBucket', '/?region=', !Ref "AWS::Region", '&tab=overview']]

#  TwitterRawLocation:
#    Description: S3 Twitter Raw location.
#    Value: !Join ['', ['s3://', !Ref 'TweetsBucket', /raw/]]

#  TwitterEntitiesLocation:
#    Description: S3 Twitter Entities location.
#    Value: !Join ['', ['s3://', !Ref 'TweetsBucket', /entities/]]

#  TwitterSentimentLocation:
#    Description: S3 Twitter Sentiment location.
#    Value: !Join ['', ['s3://', !Ref 'TweetsBucket', /sentiment/]]